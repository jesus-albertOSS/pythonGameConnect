import subprocess
from services.api_client import get_data
from data.preprocess import preprocess_users, preprocess_products
from data.visualizacion import top_users_by_points, price_distribution
from utils.report_generator import generar_reporte_html  # usa tu versi√≥n gaming ne√≥n

def main():
    print("üöÄ Iniciando an√°lisis de Game Connect...")

    # 1Ô∏è‚É£ Obtener datos desde la API
    users_data = get_data("users")
    products_data = get_data("products")

    if not users_data or not products_data:
        print("‚ùå No se pudieron obtener los datos.")
        return

    # 2Ô∏è‚É£ Preprocesar datos
    df_users = preprocess_users(users_data)
    df_products = preprocess_products(products_data)

    # 3Ô∏è‚É£ Mostrar gr√°ficos anal√≠ticos (opcional)
    if not df_users.empty:
        top_users_by_points(df_users)
    
    if not df_products.empty:
        price_distribution(df_products)

    # 4Ô∏è‚É£ Generar reporte HTML combinando ambos
    if not df_users.empty and not df_products.empty:
        generar_reporte_html(df_users, df_products)
        print("üìÑ Dashboard generado en 'reports/reporte.html'")

    print("‚úÖ An√°lisis completado con √©xito.")
    
    # 5Ô∏è‚É£ Levantar el servidor FastAPI autom√°ticamente
    print("üöÄ Iniciando servidor FastAPI en http://127.0.0.1:8000 ...")
    subprocess.run(["uvicorn", "server:app", "--reload", "--port", "8000"])

if __name__ == "__main__":
    main()
